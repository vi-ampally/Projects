{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1MBRkeH6tFXEvqEPs3ZQ8pBJETCbVXk_f","authorship_tag":"ABX9TyOFbZXByuewudnPkdaa8GP3"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Importing the Dependencies"],"metadata":{"id":"fsTD3UqjOjHu"}},{"cell_type":"code","execution_count":1,"metadata":{"id":"lx7nGqKHNze2","executionInfo":{"status":"ok","timestamp":1704323367720,"user_tz":300,"elapsed":2747,"user":{"displayName":"Vignitha Ampally","userId":"15901265624654798412"}}},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LinearRegression\n","from sklearn.linear_model import Lasso\n","from sklearn import metrics"]},{"cell_type":"markdown","source":["Data Collection and Processing"],"metadata":{"id":"hlYK7-YMP2ig"}},{"cell_type":"code","source":["#loading the data from csv file to pandas dataframe\n","car_dataset = pd.read_csv('/content/drive/MyDrive/Machine Learning Projects/Project 7/car data.csv')"],"metadata":{"id":"upgjnOjlOFVi","executionInfo":{"status":"ok","timestamp":1704323368148,"user_tz":300,"elapsed":430,"user":{"displayName":"Vignitha Ampally","userId":"15901265624654798412"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["#inspecting the first 5 rows\n","car_dataset.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":204},"id":"vqS5vJvEQM1C","executionInfo":{"status":"ok","timestamp":1704323368149,"user_tz":300,"elapsed":18,"user":{"displayName":"Vignitha Ampally","userId":"15901265624654798412"}},"outputId":"13a3f3db-f709-45dd-8714-675cf096ebf4"},"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  Car_Name  Year  Selling_Price  Present_Price  Kms_Driven Fuel_Type  \\\n","0     ritz  2014           3.35           5.59       27000    Petrol   \n","1      sx4  2013           4.75           9.54       43000    Diesel   \n","2     ciaz  2017           7.25           9.85        6900    Petrol   \n","3  wagon r  2011           2.85           4.15        5200    Petrol   \n","4    swift  2014           4.60           6.87       42450    Diesel   \n","\n","  Seller_Type Transmission  Owner  \n","0      Dealer       Manual      0  \n","1      Dealer       Manual      0  \n","2      Dealer       Manual      0  \n","3      Dealer       Manual      0  \n","4      Dealer       Manual      0  "],"text/html":["\n","  <div id=\"df-69ad296e-0325-4b23-8153-d984c799d0ac\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Car_Name</th>\n","      <th>Year</th>\n","      <th>Selling_Price</th>\n","      <th>Present_Price</th>\n","      <th>Kms_Driven</th>\n","      <th>Fuel_Type</th>\n","      <th>Seller_Type</th>\n","      <th>Transmission</th>\n","      <th>Owner</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>ritz</td>\n","      <td>2014</td>\n","      <td>3.35</td>\n","      <td>5.59</td>\n","      <td>27000</td>\n","      <td>Petrol</td>\n","      <td>Dealer</td>\n","      <td>Manual</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>sx4</td>\n","      <td>2013</td>\n","      <td>4.75</td>\n","      <td>9.54</td>\n","      <td>43000</td>\n","      <td>Diesel</td>\n","      <td>Dealer</td>\n","      <td>Manual</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>ciaz</td>\n","      <td>2017</td>\n","      <td>7.25</td>\n","      <td>9.85</td>\n","      <td>6900</td>\n","      <td>Petrol</td>\n","      <td>Dealer</td>\n","      <td>Manual</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>wagon r</td>\n","      <td>2011</td>\n","      <td>2.85</td>\n","      <td>4.15</td>\n","      <td>5200</td>\n","      <td>Petrol</td>\n","      <td>Dealer</td>\n","      <td>Manual</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>swift</td>\n","      <td>2014</td>\n","      <td>4.60</td>\n","      <td>6.87</td>\n","      <td>42450</td>\n","      <td>Diesel</td>\n","      <td>Dealer</td>\n","      <td>Manual</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-69ad296e-0325-4b23-8153-d984c799d0ac')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-69ad296e-0325-4b23-8153-d984c799d0ac button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-69ad296e-0325-4b23-8153-d984c799d0ac');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-efbfc2c9-7c66-4baf-9a1c-0169ca347430\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-efbfc2c9-7c66-4baf-9a1c-0169ca347430')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-efbfc2c9-7c66-4baf-9a1c-0169ca347430 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["#checking the number of rows and columns\n","car_dataset.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AqUvT5FuQPh4","executionInfo":{"status":"ok","timestamp":1704323368149,"user_tz":300,"elapsed":15,"user":{"displayName":"Vignitha Ampally","userId":"15901265624654798412"}},"outputId":"4931fcaf-69a9-4085-c4e2-458bac32efc7"},"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(301, 9)"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["#getting some information about the dataset\n","car_dataset.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"l1KqEDvyQfT3","executionInfo":{"status":"ok","timestamp":1704323368435,"user_tz":300,"elapsed":295,"user":{"displayName":"Vignitha Ampally","userId":"15901265624654798412"}},"outputId":"8741598d-187c-4047-fb0f-f8fd3d2ab3a9"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 301 entries, 0 to 300\n","Data columns (total 9 columns):\n"," #   Column         Non-Null Count  Dtype  \n","---  ------         --------------  -----  \n"," 0   Car_Name       301 non-null    object \n"," 1   Year           301 non-null    int64  \n"," 2   Selling_Price  301 non-null    float64\n"," 3   Present_Price  301 non-null    float64\n"," 4   Kms_Driven     301 non-null    int64  \n"," 5   Fuel_Type      301 non-null    object \n"," 6   Seller_Type    301 non-null    object \n"," 7   Transmission   301 non-null    object \n"," 8   Owner          301 non-null    int64  \n","dtypes: float64(2), int64(3), object(4)\n","memory usage: 21.3+ KB\n"]}]},{"cell_type":"code","source":["#checking the number of missing values\n","car_dataset.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YThIYISjRBOW","executionInfo":{"status":"ok","timestamp":1704323368435,"user_tz":300,"elapsed":11,"user":{"displayName":"Vignitha Ampally","userId":"15901265624654798412"}},"outputId":"2f8731e6-50e0-45cb-f652-baf458b00175"},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Car_Name         0\n","Year             0\n","Selling_Price    0\n","Present_Price    0\n","Kms_Driven       0\n","Fuel_Type        0\n","Seller_Type      0\n","Transmission     0\n","Owner            0\n","dtype: int64"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["# Checking the distribution of the categorical data\n","print(car_dataset.Fuel_Type.value_counts())\n","print()\n","print(car_dataset.Seller_Type.value_counts())\n","print()\n","print(car_dataset.Transmission.value_counts())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SyEFw68_RWFn","executionInfo":{"status":"ok","timestamp":1704323368435,"user_tz":300,"elapsed":6,"user":{"displayName":"Vignitha Ampally","userId":"15901265624654798412"}},"outputId":"73180c13-4f01-422b-f3a5-e9128c744634"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Petrol    239\n","Diesel     60\n","CNG         2\n","Name: Fuel_Type, dtype: int64\n","\n","Dealer        195\n","Individual    106\n","Name: Seller_Type, dtype: int64\n","\n","Manual       261\n","Automatic     40\n","Name: Transmission, dtype: int64\n"]}]},{"cell_type":"markdown","source":["Encoding the Categorical Data"],"metadata":{"id":"Wytm_xcXSYEn"}},{"cell_type":"code","source":["#Encoding the 'Fuel_type' Column\n","car_dataset.replace({'Fuel_Type':{'Petrol':0,'Diesel':1,'CNG':2}},inplace = True)\n","\n","#Encoding the 'Seller_Type' Column\n","car_dataset.replace({'Seller_Type':{'Dealer':0,'Individual':1}},inplace = True)\n","\n","#Encoding the 'Transmission' Column\n","car_dataset.replace({'Transmission':{'Manual':0,'Automatic':1}},inplace = True)"],"metadata":{"id":"Vd37L5mURmsu","executionInfo":{"status":"ok","timestamp":1704323368436,"user_tz":300,"elapsed":3,"user":{"displayName":"Vignitha Ampally","userId":"15901265624654798412"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["car_dataset.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":204},"id":"3c8o1pGrTneC","executionInfo":{"status":"ok","timestamp":1704323368616,"user_tz":300,"elapsed":183,"user":{"displayName":"Vignitha Ampally","userId":"15901265624654798412"}},"outputId":"13c726cf-958e-4e99-fc60-695f15f9b932"},"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  Car_Name  Year  Selling_Price  Present_Price  Kms_Driven  Fuel_Type  \\\n","0     ritz  2014           3.35           5.59       27000          0   \n","1      sx4  2013           4.75           9.54       43000          1   \n","2     ciaz  2017           7.25           9.85        6900          0   \n","3  wagon r  2011           2.85           4.15        5200          0   \n","4    swift  2014           4.60           6.87       42450          1   \n","\n","   Seller_Type  Transmission  Owner  \n","0            0             0      0  \n","1            0             0      0  \n","2            0             0      0  \n","3            0             0      0  \n","4            0             0      0  "],"text/html":["\n","  <div id=\"df-42fa90c0-c0ce-425e-84bc-0f6d8052a280\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Car_Name</th>\n","      <th>Year</th>\n","      <th>Selling_Price</th>\n","      <th>Present_Price</th>\n","      <th>Kms_Driven</th>\n","      <th>Fuel_Type</th>\n","      <th>Seller_Type</th>\n","      <th>Transmission</th>\n","      <th>Owner</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>ritz</td>\n","      <td>2014</td>\n","      <td>3.35</td>\n","      <td>5.59</td>\n","      <td>27000</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>sx4</td>\n","      <td>2013</td>\n","      <td>4.75</td>\n","      <td>9.54</td>\n","      <td>43000</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>ciaz</td>\n","      <td>2017</td>\n","      <td>7.25</td>\n","      <td>9.85</td>\n","      <td>6900</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>wagon r</td>\n","      <td>2011</td>\n","      <td>2.85</td>\n","      <td>4.15</td>\n","      <td>5200</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>swift</td>\n","      <td>2014</td>\n","      <td>4.60</td>\n","      <td>6.87</td>\n","      <td>42450</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-42fa90c0-c0ce-425e-84bc-0f6d8052a280')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-42fa90c0-c0ce-425e-84bc-0f6d8052a280 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-42fa90c0-c0ce-425e-84bc-0f6d8052a280');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-8ea00a97-1717-4d1e-af89-0058344efb66\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8ea00a97-1717-4d1e-af89-0058344efb66')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-8ea00a97-1717-4d1e-af89-0058344efb66 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":9}]},{"cell_type":"markdown","source":["Splitting the data into Training and Test Data"],"metadata":{"id":"M4meFcUTT12G"}},{"cell_type":"code","source":["X = car_dataset.drop(columns = ['Car_Name','Selling_Price'], axis = 1)\n","Y = car_dataset['Selling_Price']"],"metadata":{"id":"6bV2okTPTo9j","executionInfo":{"status":"ok","timestamp":1704323368616,"user_tz":300,"elapsed":11,"user":{"displayName":"Vignitha Ampally","userId":"15901265624654798412"}}},"execution_count":10,"outputs":[]},{"cell_type":"markdown","source":["Splitting Training and Test Data"],"metadata":{"id":"mVX8ssc-Upkw"}},{"cell_type":"code","source":["X_train, X_test,Y_train, Y_Test = train_test_split(X,Y,test_size=0.1, random_state = 2)"],"metadata":{"id":"Asqh7es6UTuU","executionInfo":{"status":"ok","timestamp":1704323368616,"user_tz":300,"elapsed":10,"user":{"displayName":"Vignitha Ampally","userId":"15901265624654798412"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["print(X.shape,X_train.shape, X_test.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NHQYFtbvVSPd","executionInfo":{"status":"ok","timestamp":1704323368617,"user_tz":300,"elapsed":10,"user":{"displayName":"Vignitha Ampally","userId":"15901265624654798412"}},"outputId":"cb7415bc-a0ac-42f6-8a4a-e5eee7a92870"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["(301, 7) (270, 7) (31, 7)\n"]}]},{"cell_type":"markdown","source":["Model Training\n","\n","1. Linear Regression"],"metadata":{"id":"2G3QcJrOVfZw"}},{"cell_type":"code","source":["#loading the linear regression model\n","lin_reg_model = LinearRegression()"],"metadata":{"id":"hvF-lfn5VZIf","executionInfo":{"status":"ok","timestamp":1704323368617,"user_tz":300,"elapsed":6,"user":{"displayName":"Vignitha Ampally","userId":"15901265624654798412"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["lin_reg_model.fit(X_train, Y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":74},"id":"Bc1hn6P_VtE7","executionInfo":{"status":"ok","timestamp":1704323368617,"user_tz":300,"elapsed":6,"user":{"displayName":"Vignitha Ampally","userId":"15901265624654798412"}},"outputId":"52767eaf-b8c8-4abe-8f96-ae14592d4d90"},"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LinearRegression()"],"text/html":["<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":14}]},{"cell_type":"markdown","source":["Model Evaluation"],"metadata":{"id":"8BgJagEAV87k"}},{"cell_type":"code","source":["#Prediction on Training data\n","training_data_prediction = lin_reg_model.predict(X_train)\n"],"metadata":{"id":"wX7y7SdKWAl_","executionInfo":{"status":"ok","timestamp":1704323368617,"user_tz":300,"elapsed":5,"user":{"displayName":"Vignitha Ampally","userId":"15901265624654798412"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["# R Squared Error\n","\n","error_score = metrics.r2_score(Y_train,training_data_prediction) #compare the origin with model prediction values\n","print('R Squared Error: ',error_score) #the error score should be as low as possible"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5dO7E_rIWO3i","executionInfo":{"status":"ok","timestamp":1704323368776,"user_tz":300,"elapsed":164,"user":{"displayName":"Vignitha Ampally","userId":"15901265624654798412"}},"outputId":"9ade1691-56dc-4a06-eae2-ea4846136b3a"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["R Squared Error:  0.8799451660493711\n"]}]},{"cell_type":"code","source":["#good way to predict the accuracy is to plot them"],"metadata":{"id":"mUPX5js8WpXP","executionInfo":{"status":"ok","timestamp":1704323368777,"user_tz":300,"elapsed":2,"user":{"displayName":"Vignitha Ampally","userId":"15901265624654798412"}}},"execution_count":17,"outputs":[]},{"cell_type":"markdown","source":["Visualize the actual prices and Predicted prices"],"metadata":{"id":"e1klHdSmkh0c"}},{"cell_type":"code","source":["plt.scatter(Y_train, training_data_prediction)\n","plt.xlabel('Actual Price')\n","plt.ylabel('Predictive Price')\n","plt.title('Actual Prices vs Predicted Prices')\n","plt.show()\n","\n","#tells us how close the values. once the price value increase, there are some outliers.\n","# the values predicted by our ML model is very close to the original values."],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"BB5mZtNXkkcL","executionInfo":{"status":"ok","timestamp":1704323369513,"user_tz":300,"elapsed":739,"user":{"displayName":"Vignitha Ampally","userId":"15901265624654798412"}},"outputId":"5a24326e-982f-4b9f-f983-876aa75aa0e5"},"execution_count":18,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["#Prediction on Test Data\n","test_data_prediction = lin_reg_model.predict(X_test)"],"metadata":{"id":"Pn6C17alk4Vj","executionInfo":{"status":"ok","timestamp":1704323369514,"user_tz":300,"elapsed":6,"user":{"displayName":"Vignitha Ampally","userId":"15901265624654798412"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":["# R Squared Error\n","\n","error_score_test = metrics.r2_score(Y_Test,test_data_prediction) #compare the origin with model prediction values\n","print('R Squared Error: ',error_score_test) #the error score should be as low as possible"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FiMzFP3xlWS7","executionInfo":{"status":"ok","timestamp":1704323369514,"user_tz":300,"elapsed":5,"user":{"displayName":"Vignitha Ampally","userId":"15901265624654798412"}},"outputId":"50918b7b-b7bb-463a-efec-f0be5ee488d0"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["R Squared Error:  0.8365766715027051\n"]}]},{"cell_type":"code","source":["plt.scatter(Y_Test, test_data_prediction)\n","plt.xlabel('Actual Price')\n","plt.ylabel('Predictive Price')\n","plt.title('Actual Prices vs Predicted Prices')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"17dpg99zloAv","executionInfo":{"status":"ok","timestamp":1704323370179,"user_tz":300,"elapsed":668,"user":{"displayName":"Vignitha Ampally","userId":"15901265624654798412"}},"outputId":"424b311b-7701-42f9-be43-70526da6ad12"},"execution_count":21,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Lasso regression performs better in most of the cases\n","# Linear regression goes well with correlated variables\n","\n"],"metadata":{"id":"KvxzwNfwmLzI","executionInfo":{"status":"ok","timestamp":1704323370179,"user_tz":300,"elapsed":4,"user":{"displayName":"Vignitha Ampally","userId":"15901265624654798412"}}},"execution_count":22,"outputs":[]},{"cell_type":"markdown","source":["Lasso Regression"],"metadata":{"id":"P_cQ9vPLl4DS"}},{"cell_type":"code","source":["#loading the lasso regression model\n","lass_reg_model = Lasso()"],"metadata":{"id":"CLFvgOZnl5Ni","executionInfo":{"status":"ok","timestamp":1704323555315,"user_tz":300,"elapsed":144,"user":{"displayName":"Vignitha Ampally","userId":"15901265624654798412"}}},"execution_count":23,"outputs":[]},{"cell_type":"code","source":["lass_reg_model.fit(X_train, Y_train)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":74},"id":"4aIqzDv4mZ5D","executionInfo":{"status":"ok","timestamp":1704323626734,"user_tz":300,"elapsed":159,"user":{"displayName":"Vignitha Ampally","userId":"15901265624654798412"}},"outputId":"f81c0493-eb85-4d11-ef66-60c881e0a86b"},"execution_count":24,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Lasso()"],"text/html":["<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Lasso()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Lasso</label><div class=\"sk-toggleable__content\"><pre>Lasso()</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":24}]},{"cell_type":"markdown","source":["Model Evaluation"],"metadata":{"id":"SQBNxQXhmuSZ"}},{"cell_type":"code","source":["#prediction on Training data\n","lasso_training_data_prediction = lass_reg_model.predict(X_train)"],"metadata":{"id":"Ng5SnBjQmrUY","executionInfo":{"status":"ok","timestamp":1704323687938,"user_tz":300,"elapsed":3,"user":{"displayName":"Vignitha Ampally","userId":"15901265624654798412"}}},"execution_count":25,"outputs":[]},{"cell_type":"code","source":["# R sqaured Error\n","lasso_error_score = metrics.r2_score(Y_train,lasso_training_data_prediction)\n","print('Lasso R Squared Eroor :', lasso_error_score)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jViXapAfm52T","executionInfo":{"status":"ok","timestamp":1704323805261,"user_tz":300,"elapsed":161,"user":{"displayName":"Vignitha Ampally","userId":"15901265624654798412"}},"outputId":"121b1e38-d44b-491f-c8bc-31a15e9eeca1"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["Lasso R Squared Eroor : 0.8427856123435794\n"]}]},{"cell_type":"markdown","source":["Visualize the Actual prices and Predicted prices"],"metadata":{"id":"0uczrMu8nYwn"}},{"cell_type":"code","source":["plt.scatter(Y_train, lasso_training_data_prediction)\n","plt.xlabel('Actual Price')\n","plt.ylabel('Predictive Price')\n","plt.title('Actual Prices vs Predicted Prices')\n","plt.show()\n","\n","#points are much closer to each other compared to linear regression"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"w32Rolj9nW6T","executionInfo":{"status":"ok","timestamp":1704323935447,"user_tz":300,"elapsed":1002,"user":{"displayName":"Vignitha Ampally","userId":"15901265624654798412"}},"outputId":"71ec9110-eafa-4406-cbf7-66aafa5fbacf"},"execution_count":29,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["#Prediction on Test Data\n","lasso_test_data_prediction = lass_reg_model.predict(X_test)"],"metadata":{"id":"_hJUpUhpn2du","executionInfo":{"status":"ok","timestamp":1704323991644,"user_tz":300,"elapsed":160,"user":{"displayName":"Vignitha Ampally","userId":"15901265624654798412"}}},"execution_count":30,"outputs":[]},{"cell_type":"code","source":["# R sqaured Error\n","lasso_test_error_score = metrics.r2_score(Y_Test,lasso_test_data_prediction)\n","print('Lasso R Squared Eroor :', lasso_test_error_score)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lJ7LIYuKoEZ7","executionInfo":{"status":"ok","timestamp":1704324030945,"user_tz":300,"elapsed":156,"user":{"displayName":"Vignitha Ampally","userId":"15901265624654798412"}},"outputId":"70bdee88-fbb9-40d8-9084-6b15086ec68f"},"execution_count":31,"outputs":[{"output_type":"stream","name":"stdout","text":["Lasso R Squared Eroor : 0.8709167941173195\n"]}]},{"cell_type":"code","source":["plt.scatter(Y_Test, lasso_test_data_prediction)\n","plt.xlabel('Actual Price')\n","plt.ylabel('Predictive Price')\n","plt.title('Actual Prices vs Predicted Prices')\n","plt.show()\n","\n","#distance is not too much which makes it a pretty good model"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"BUnjVwR2oRam","executionInfo":{"status":"ok","timestamp":1704324110117,"user_tz":300,"elapsed":834,"user":{"displayName":"Vignitha Ampally","userId":"15901265624654798412"}},"outputId":"39a0fabc-4d34-4354-8b2c-e9e101f66c04"},"execution_count":33,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"Npcn_bz4ohKt"},"execution_count":null,"outputs":[]}]}